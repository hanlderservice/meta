# 数据源配置
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/meta_oss?useUnicode=true&characterEncoding=utf8&zeroDateTimeBehavior=convertToNull&useSSL=true&serverTimezone=GMT%2B8
    username: root
    password: 123456

  redis:
    #    Redis 数据库索引(默认 0)
    database: 0
    #    Redis 服务器连接端口
    port: 6379
    #    Redis服务器地址
    #    host: 127.0.0.1
    host: 182.254.141.51
    password: Cnbm#5201314
    jedis:
      pool:
        # 连接池中的最大空闲连接
        max-idle: 8
        # 连接池最大连接数(使用负数表示没有限制)
        max-active: 8
        # 连接池中最小空闲连接
        min-idle: 0
        # 连接池最大阻塞等待时间(使用负值表示没有限制)
        max-wait: -1
    # 连接超市时间(毫秒)
    timeout: 600000

  quartz:
    job-store-type: jdbc
    wait-for-jobs-to-complete-on-shutdown: true
    scheduler-name: meta

    properties:
      org.quartz.threadPool.threadCount: 5
      # 线程调度器实例名
      org.quartz.scheduler.instanceName: quartzScheduler
      # 线程池的线程数，即最多3个任务同时跑
      #      org.quartz.threadPool.threadCount: 3
      # 使用内存存储任务和触发器等信息
      #      org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore
      org.quartz.threadPool.threadPriority: 5
      org.quartz.simpl.SimpleThreadPool: 5
      org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread: true
      org.quartz.jobStore.misfireThreshold: 5000
      org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX
      org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
      # 在调度流程的第一步，也就是拉取待即将触发的triggers时，是上锁的状态，即不会同时存在多个线程拉取到相同的trigger的情况，也就避免的重复调度的危险。参考：https://segmentfault.com/a/1190000015492260
      org.quartz.jobStore.acquireTriggersWithinLock: true



# 打印SQL语句和结果集，本地开发环境可开启，线上注释掉
#mybatis-plus:
#  configuration:
#    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

#    druid:
#      # 主库数据源
#      master:
#        url:
